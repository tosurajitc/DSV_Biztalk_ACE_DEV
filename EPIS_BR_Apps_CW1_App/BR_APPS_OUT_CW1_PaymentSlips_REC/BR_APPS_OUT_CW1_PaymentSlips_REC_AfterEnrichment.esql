BROKER SCHEMA BR_APPS_OUT_CW1_PaymentSlips_REC
CREATE COMPUTE MODULE BR_APPS_OUT_CW1_PaymentSlips_REC_AfterEnrichment
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
		-- VALIDATION LOGIC: Light processing for validation and routing
		DECLARE episInfo 		REFERENCE TO 	Environment.variables.EventData.episInfo;
		DECLARE sourceInfo 		REFERENCE TO 	Environment.variables.EventData.sourceInfo;
		DECLARE targetInfo 		REFERENCE TO 	Environment.variables.EventData.targetInfo;
		DECLARE integrationInfo REFERENCE TO 	Environment.variables.EventData.integrationInfo;
		DECLARE dataInfo 		REFERENCE TO 	Environment.variables.EventData.dataInfo;
		
		-- VALIDATION RULES: Message validation and routing decisions
		DECLARE guid CHARACTER;
		SET guid = PASSTHRU('CALL GenerateGuid()');
		SET OutputRoot.XMLNSC.*:Guid = guid;
		
		DECLARE currentDateTime CHARACTER;
		SET currentDateTime = PASSTHRU('CALL GetCurrentDateTime()');
		SET OutputRoot.XMLNSC.*:DateTime = currentDateTime;
		
		-- ROUTING LOGIC: Conditional routing based on message content
		IF (InputRoot.XMLNSC.:Header.:MessageType = 'PaymentSlips') THEN
			SET OutputRoot.XMLNSC.*:MessageType = 'PaymentSlips';
		ELSE
			SET OutputRoot.XMLNSC.*:MessageType = 'Unknown';
		END IF;
		
		-- STANDARD MESSAGE PROCESSING
		SET OutputRoot = NULL;
		SET OutputRoot = InputRoot;
		
		RETURN TRUE;
	END;

	-- STANDARD IBM ACE INFRASTRUCTURE
	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;

END MODULE;