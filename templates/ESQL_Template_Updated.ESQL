/*
================================================================================
INPUT AND OUTPUT EVENT MESSAGE TEMPLATE - METADATA ONLY
================================================================================
*/
BROKER SCHEMA MODULE _SYSTEM___MSG_TYPE___FLOW_PROCESS___SYSTEM2___FLOW_TYPE
CREATE COMPUTE MODULE _SYSTEM___MSG_TYPE___FLOW_PROCESS___SYSTEM2___FLOW_TYPE__InputEventMessage
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
		-- ✅ COMPLIANT: Event data references for METADATA CAPTURE ONLY
		DECLARE episInfo 		REFERENCE TO 	Environment.variables.EventData.episInfo;
		DECLARE sourceInfo 		REFERENCE TO 	Environment.variables.EventData.sourceInfo;
		DECLARE targetInfo 		REFERENCE TO 	Environment.variables.EventData.targetInfo;
		DECLARE integrationInfo REFERENCE TO 	Environment.variables.EventData.integrationInfo;
		DECLARE dataInfo 		REFERENCE TO 	Environment.variables.EventData.dataInfo;
		
		-- ✅ COMPLIANT: Source metadata extraction (for production support tracking)
		SET sourceInfo.srcAppIdentifier 		= InputRoot.XMLNSC.[<].*:Header.*:Source.*:Identifier; 
		SET sourceInfo.srcEnterpriseCode	 	= InputRoot.XMLNSC.[<].*:Header.*:Source.*:EnterpriseCode;
		SET sourceInfo.srcDivision		 		= InputRoot.XMLNSC.[<].*:Header.*:Source.*:Division;
		SET sourceInfo.srcDepartmentCode 		= InputRoot.XMLNSC.[<].*:Header.*:Source.*:DepartmentCode;
		SET sourceInfo.srcBranchCode 			= InputRoot.XMLNSC.[<].*:Header.*:Source.*:BranchCode;
		SET sourceInfo.srcCountryCode 			= InputRoot.XMLNSC.[<].*:Header.*:Source.*:CountryCode;	
		SET sourceInfo.srcCompanyCode 			= InputRoot.XMLNSC.[<].*:Header.*:Source.*:CompanyCode;
		SET sourceInfo.srcApplicationCode 		= InputRoot.XMLNSC.[<].*:Header.*:Source.*:ApplicationCode;
		
		-- ✅ COMPLIANT: Target metadata extraction (for production support tracking)
		SET targetInfo.tgtAppIdentifier 		= InputRoot.XMLNSC.[<].*:Header.*:Target.*:Identifier; 	
		SET targetInfo.tgtEnterpriseCode 		= InputRoot.XMLNSC.[<].*:Header.*:Target.*:EnterpriseCode; 
		SET targetInfo.tgtDivision 				= InputRoot.XMLNSC.[<].*:Header.*:Target.*:Division; 
		SET targetInfo.tgtDepartmentCode 		= InputRoot.XMLNSC.[<].*:Header.*:Target.*:DepartmentCode; 
		SET targetInfo.tgtBranchCode 			= InputRoot.XMLNSC.[<].*:Header.*:Target.*:branchCode;
		SET targetInfo.tgtCountryCode 			= InputRoot.XMLNSC.[<].*:Header.*:Target.*:CountryCode;  
		SET targetInfo.tgtCompanyCode 			= InputRoot.XMLNSC.[<].*:Header.*:Target.*:CompanyCode; 
		SET targetInfo.tgtApplicationCode 		= InputRoot.XMLNSC.[<].*:Header.*:Target.*:ApplicationCode; 
	
		-- ✅ COMPLIANT: Technical metadata (not business data)
		SET dataInfo.messageType = InputRoot.XMLNSC.[<].*:Header.*:MessageType;		
		SET dataInfo.dataFormat = 'XML';
		SET dataInfo.batch = false;
		
		-- ✅ STANDARD IBM ACE: Required message processing
		SET OutputRoot = NULL;
		SET OutputRoot = InputRoot;
		
		RETURN TRUE;
	END;

	-- ✅ STANDARD IBM ACE INFRASTRUCTURE: Required message processing procedures
	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;

END MODULE;


/*
================================================================================
COMPUTE TEMPLATE - FULL BUSINESS LOGIC
================================================================================
*/

BROKER SCHEMA MODULE _SYSTEM___MSG_TYPE___FLOW_PROCESS___SYSTEM2___FLOW_TYPE
CREATE COMPUTE MODULE _SYSTEM___MSG_TYPE___FLOW_PROCESS___SYSTEM2___FLOW_TYPE__Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
		-- ✅ BUSINESS LOGIC: Full message transformation and processing
		DECLARE episInfo 		REFERENCE TO 	Environment.variables.EventData.episInfo;
		DECLARE sourceInfo 		REFERENCE TO 	Environment.variables.EventData.sourceInfo;
		DECLARE targetInfo 		REFERENCE TO 	Environment.variables.EventData.targetInfo;
		DECLARE integrationInfo REFERENCE TO 	Environment.variables.EventData.integrationInfo;
		DECLARE dataInfo 		REFERENCE TO 	Environment.variables.EventData.dataInfo;
		
		-- ✅ BUSINESS DATA EXTRACTION: Extract business identifiers and data
		SET dataInfo.mainIdentifier = InputRoot.XMLNSC.[<].*:_BUSINESS_ENTITY_.*:_BUSINESS_IDENTIFIER_;
		
		-- [[[INSERT_BUSINESS_LOGIC_HERE]]]
		
		-- ✅ STANDARD MESSAGE PROCESSING
		SET OutputRoot = NULL;
		SET OutputRoot = InputRoot;
		
		RETURN TRUE;
	END;

	-- ✅ STANDARD IBM ACE INFRASTRUCTURE
	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;

END MODULE;

/*
================================================================================
PROCESSING TEMPLATE - VALIDATION AND ROUTING ONLY
================================================================================
*/
BROKER SCHEMA MODULE _SYSTEM___MSG_TYPE___FLOW_PROCESS___SYSTEM2___FLOW_TYPE
CREATE COMPUTE MODULE _SYSTEM___MSG_TYPE___FLOW_PROCESS___SYSTEM2___FLOW_TYPE__Processing
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
		-- ✅ VALIDATION LOGIC: Light processing for validation and routing
		DECLARE episInfo 		REFERENCE TO 	Environment.variables.EventData.episInfo;
		DECLARE sourceInfo 		REFERENCE TO 	Environment.variables.EventData.sourceInfo;
		DECLARE targetInfo 		REFERENCE TO 	Environment.variables.EventData.targetInfo;
		DECLARE integrationInfo REFERENCE TO 	Environment.variables.EventData.integrationInfo;
		DECLARE dataInfo 		REFERENCE TO 	Environment.variables.EventData.dataInfo;
		
		-- ✅ VALIDATION RULES: Message validation and routing decisions
		-- Validation logic will be injected here based on Vector DB requirements
		-- Example: Message format validation, routing rules, data quality checks
		
		-- ✅ ROUTING LOGIC: Conditional routing based on message content
		-- Routing decisions will be injected here
		-- Example: Route based on message type, country code, or business rules
		
		-- ✅ STANDARD MESSAGE PROCESSING
		SET OutputRoot = NULL;
		SET OutputRoot = InputRoot;
		
		RETURN TRUE;
	END;

	-- ✅ STANDARD IBM ACE INFRASTRUCTURE
	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;

END MODULE;

/*
================================================================================
FAILURE/ERROR HANDLING TEMPLATE
================================================================================
*/
BROKER SCHEMA MODULE _SYSTEM___MSG_TYPE___FLOW_PROCESS___SYSTEM2___FLOW_TYPE
CREATE COMPUTE MODULE _SYSTEM___MSG_TYPE___FLOW_PROCESS___SYSTEM2___FLOW_TYPE__FailureEventMessage
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
		-- ✅ ERROR HANDLING: Error metadata capture for production support
		DECLARE episInfo 		REFERENCE TO 	Environment.variables.EventData.episInfo;
		DECLARE sourceInfo 		REFERENCE TO 	Environment.variables.EventData.sourceInfo;
		DECLARE targetInfo 		REFERENCE TO 	Environment.variables.EventData.targetInfo;
		DECLARE integrationInfo REFERENCE TO 	Environment.variables.EventData.integrationInfo;
		DECLARE dataInfo 		REFERENCE TO 	Environment.variables.EventData.dataInfo;
		DECLARE errorInfo 		REFERENCE TO 	Environment.variables.EventData.errorInfo;
		
		-- ✅ ERROR METADATA CAPTURE
		SET errorInfo.errorTimestamp = CURRENT_TIMESTAMP;
		SET errorInfo.flowName = MessageFlowLabel;
		SET errorInfo.nodeName = NodeLabel;
		
		-- ✅ EXCEPTION HANDLING
		IF EXISTS(InputExceptionList.*[]) THEN
			SET errorInfo.exceptionDetails = GetFaultDetailAsString(InputExceptionList);
		END IF;
		
		-- ✅ TECHNICAL METADATA
		SET dataInfo.messageType = 'ERROR';		
		SET dataInfo.dataFormat = 'XML';
		SET dataInfo.batch = false;
		
		-- ✅ STANDARD MESSAGE PROCESSING
		SET OutputRoot = NULL;
		SET OutputRoot = InputRoot;
		
		RETURN TRUE;
	END;

	-- ✅ ERROR HANDLING FUNCTION
	CREATE FUNCTION GetFaultDetailAsString(IN fault REFERENCE) RETURNS CHARACTER
	BEGIN
		DECLARE str CHARACTER '';
		IF EXISTS(fault.*:detail.*:ExceptionDetail[]) THEN
			DECLARE exc REFERENCE TO fault.*:detail.*:ExceptionDetail[1];
			WHILE EXISTS(exc.*:Type[]) DO
				IF LENGTH(str) > 0 THEN
					SET str = str || ' ';
				END IF;
				SET str = str || COALESCE(exc.*:Type, '') || ': ' || COALESCE(exc.*:Message, '');
				MOVE exc TO exc.*:InnerException;
			END WHILE;
		END IF;
		RETURN str;
	END;

	-- ✅ STANDARD IBM ACE INFRASTRUCTURE
	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;

END MODULE;