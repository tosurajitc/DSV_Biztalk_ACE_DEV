CREATE COMPUTE MODULE CW1_IN_Document_SND_CW1IsPublishedFlagLookup_Compute

CREATE FUNCTION Main() RETURNS BOOLEAN
BEGIN
    DECLARE documentInfo 		REFERENCE TO 	Environment.variables.EventData.documentInfo;
    DECLARE senderInfo 		REFERENCE TO 	Environment.variables.EventData.senderInfo;
    DECLARE receiverInfo 		REFERENCE TO 	Environment.variables.EventData.receiverInfo;
    DECLARE integrationDetails REFERENCE TO 	Environment.variables.EventData.integrationDetails;
    DECLARE dataDetails 		REFERENCE TO 	Environment.variables.EventData.dataDetails;

    SET senderInfo.senderName = 'Azure Blob';
    SET receiverInfo.receiverName = 'CDM Document';
    SET dataDetails.dataType = 'XML';

    DECLARE isPublishedFlag INTEGER;
    DECLARE eDocument REFERENCE TO OutputRoot.XMLNSC;
    DECLARE customsDeclarationId INTEGER;
    DECLARE mainCompanyId INTEGER;
    DECLARE shipmentId INTEGER;
    DECLARE eAdapterRecepientId INTEGER;

    SET isPublishedFlag = 0;
    SET eDocument = NULL;
    SET customsDeclarationId = 0;
    SET mainCompanyId = 0;
    SET shipmentId = 0;
    SET eAdapterRecepientId = 0;

    SET isPublishedFlag = proc_EDocument_GetIsPublishedFlag(documentInfo);
    SET eAdapterRecepientId = sp_Get_EAdapterRecepientId(receiverInfo);
    SET customsDeclarationId = proc_CustomsDeclaration_GetIdByReference(documentInfo);
    SET mainCompanyId = sp_GetMainCompanyInCountry(senderInfo);
    SET shipmentId = sp_Shipment_GetIdBySSN(dataDetails);

    DECLARE xsltOutput BLOB;
    SET xsltOutput = Transform(documentInfo, 'xslt/transform.xsl');
    SET OutputRoot.XMLNSC = xsltOutput;

    SET dataDetails.dataTransformed = TRUE;

    RETURN TRUE;
END;

CREATE PROCEDURE CopyMessageHeaders() BEGIN
    DECLARE I INTEGER 1;
    DECLARE J INTEGER;
    SET J = CARDINALITY(InputRoot.*[]);
    WHILE I < J DO
        SET OutputRoot.*[I] = InputRoot.*[I];
        SET I = I + 1;
    END WHILE;
END;

CREATE PROCEDURE CopyEntireMessage() BEGIN
    SET OutputRoot = InputRoot;
END;
END MODULE;