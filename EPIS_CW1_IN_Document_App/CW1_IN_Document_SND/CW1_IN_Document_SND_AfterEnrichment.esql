CREATE COMPUTE MODULE CW1_IN_Document_SND_AfterEnrichment
CREATE FUNCTION Main() RETURNS BOOLEAN
BEGIN
    
    -- VALIDATION LOGIC: Light processing for validation and routing
    DECLARE episInfo         REFERENCE TO  Environment.variables.EventData.episInfo;
    DECLARE sourceInfo       REFERENCE TO  Environment.variables.EventData.sourceInfo;
    DECLARE targetInfo       REFERENCE TO  Environment.variables.EventData.targetInfo;
    DECLARE integrationInfo  REFERENCE TO  Environment.variables.EventData.integrationInfo;
    DECLARE dataInfo         REFERENCE TO  Environment.variables.EventData.dataInfo;
    
    -- VALIDATION RULES: Message validation and routing decisions
    -- Basic validation logic for message format and routing rules
    IF episInfo <> NULL AND sourceInfo <> NULL AND targetInfo <> NULL THEN
        -- Perform basic validation checks
        IF CAST(episInfo AS INTEGER) > 0 AND CAST(sourceInfo AS INTEGER) > 0 AND CAST(targetInfo AS INTEGER) > 0 THEN
            -- Routing decisions based on message content
            IF integrationInfo = 'DYNAMIC_INTERFACE' THEN
                -- Perform basic routing logic
                SET Environment.variables.EventData.integrationInfo = 'DYNAMIC_INTERFACE';
            END IF;
        END IF;
    END IF;
    
    -- ROUTING LOGIC: Conditional routing based on message content
    -- Basic routing logic for message forwarding
    IF dataInfo <> NULL THEN
        -- Perform basic routing decisions
        SET Environment.variables.EventData.dataInfo = dataInfo;
    END IF;
    
    -- STANDARD MESSAGE PROCESSING
    SET OutputRoot = NULL;
    SET OutputRoot = InputRoot;
    
    RETURN TRUE;
END;

-- STANDARD IBM ACE INFRASTRUCTURE
CREATE PROCEDURE CopyMessageHeaders() BEGIN
    DECLARE I INTEGER 1;
    DECLARE J INTEGER;
    SET J = CARDINALITY(InputRoot.*[]);
    WHILE I < J DO
        SET OutputRoot.*[I] = InputRoot.*[I];
        SET I = I + 1;
    END WHILE;
END;

CREATE PROCEDURE CopyEntireMessage() BEGIN
    SET OutputRoot = InputRoot;
END;

END MODULE;