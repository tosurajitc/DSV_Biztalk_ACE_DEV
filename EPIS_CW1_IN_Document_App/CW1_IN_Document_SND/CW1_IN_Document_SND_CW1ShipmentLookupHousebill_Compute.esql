CREATE COMPUTE MODULE CW1_IN_Document_SND_CW1ShipmentLookupHousebill_Compute
CREATE FUNCTION Main() RETURNS BOOLEAN
BEGIN
    DECLARE shipmentInfo 		REFERENCE TO 	Environment.variables.EventData.shipmentInfo;
    DECLARE sourceCompany 		REFERENCE TO 	Environment.variables.EventData.sourceCompany;
    DECLARE targetCompany 		REFERENCE TO 	Environment.variables.EventData.targetCompany;
    DECLARE integrationDetails REFERENCE TO 	Environment.variables.EventData.integrationDetails;
    DECLARE dataPayload 		REFERENCE TO 	Environment.variables.EventData.dataPayload;

    SET sourceCompany.CompanyName = 'CW1';
    SET targetCompany.CompanyName = 'ShipmentLookupHousebill';
    SET dataPayload.ShipmentType = 'Housebill';

    DECLARE isPublishedFlag BOOLEAN;
    DECLARE recepientId INTEGER;
    DECLARE customsDeclarationId INTEGER;
    DECLARE mainCompanyId INTEGER;
    DECLARE shipmentId INTEGER;

    SET isPublishedFlag = proc_EDocument_GetIsPublishedFlag(shipmentInfo.ShipmentId);
    SET recepientId = sp_Get_EAdapterRecepientId(sourceCompany.CompanyId);
    SET customsDeclarationId = proc_CustomsDeclaration_GetIdByReference(shipmentInfo.ReferenceNumber);
    SET mainCompanyId = sp_GetMainCompanyInCountry(targetCompany.CountryCode);
    SET shipmentId = sp_Shipment_GetIdBySSN(shipmentInfo.SSN);

    DECLARE xmlRef REFERENCE TO InputRoot.XMLNSC;
    DECLARE msgRef REFERENCE TO InputRoot;

    SET OutputRoot.XMLNSC = xmlRef;
    SET OutputRoot = msgRef;

    DECLARE xsltResult BLOB;
    SET xsltResult = Transform(xmlRef, 'GetESBEnvironment()', 'GenerateGuid()', 'GetCurrentDateTime()');
    SET OutputRoot.CDM = xsltResult;

    DECLARE azureBlobData BLOB;
    SET azureBlobData = GetAzureBlobData(shipmentId);
    SET xsltResult = Transform(azureBlobData, 'MapAzureBlobToCDM.xsl');
    SET OutputRoot.CDM = xsltResult;

    RETURN TRUE;
END;

CREATE PROCEDURE CopyMessageHeaders() BEGIN
    DECLARE I INTEGER 1;
    DECLARE J INTEGER;
    SET J = CARDINALITY(InputRoot.*[]);
    WHILE I < J DO
        SET OutputRoot.*[I] = InputRoot.*[I];
        SET I = I + 1;
    END WHILE;
END;

CREATE PROCEDURE CopyEntireMessage() BEGIN
    SET OutputRoot = InputRoot;
END;
END MODULE;