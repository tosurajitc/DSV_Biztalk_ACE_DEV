CREATE COMPUTE MODULE CW1_IN_Document_SND_DocPackApp_Compute.esql

CREATE FUNCTION Main() RETURNS BOOLEAN
BEGIN
    DECLARE documentInfo 		REFERENCE TO 	Environment.variables.EventData.documentInfo;
    DECLARE sourceSystem 		REFERENCE TO 	Environment.variables.EventData.sourceSystem;
    DECLARE targetSystem 		REFERENCE TO 	Environment.variables.EventData.targetSystem;
    DECLARE integrationDetails REFERENCE TO 	Environment.variables.EventData.integrationDetails;
    DECLARE dataPayload 		REFERENCE TO 	Environment.variables.EventData.dataPayload;

    SET sourceSystem = 'DocPackApp';
    SET targetSystem = 'CDM';
    SET dataPayload = CAST('Initial Data' AS CHARACTER);

    DECLARE isPublishedFlag BOOLEAN;
    DECLARE recepientId INTEGER;
    DECLARE customsDeclarationId INTEGER;
    DECLARE mainCompanyId INTEGER;
    DECLARE shipmentId INTEGER;

    DECLARE xmlRef REFERENCE TO InputRoot.XMLNSC;
    DECLARE msgRef REFERENCE TO InputRoot;

    SET isPublishedFlag = FALSE;
    SET recepientId = 0;
    SET customsDeclarationId = 0;
    SET mainCompanyId = 0;
    SET shipmentId = 0;

    SET isPublishedFlag = proc_EDocument_GetIsPublishedFlag(documentInfo);
    SET recepientId = sp_Get_EAdapterRecepientId(sourceSystem);
    SET customsDeclarationId = proc_CustomsDeclaration_GetIdByReference(dataPayload);
    SET mainCompanyId = sp_GetMainCompanyInCountry(targetSystem);
    SET shipmentId = sp_Shipment_GetIdBySSN(dataPayload);

    DECLARE transformedData CHARACTER;
    SET transformedData = CAST(XSLT(xmlRef, 'transform.xsl') AS CHARACTER);
    SET OutputRoot.XMLNSC = transformedData;

    DECLARE azureBlobData BLOB;
    SET azureBlobData = BLOB('Azure Blob Data');
    SET OutputRoot.BLOB = azureBlobData;

    DECLARE cdmDocument CHARACTER;
    SET cdmDocument = CAST(XSLT(azureBlobData, 'cdm-transform.xsl') AS CHARACTER);
    SET OutputRoot.CDM = cdmDocument;

    RETURN TRUE;
END;

CREATE PROCEDURE CopyMessageHeaders() BEGIN
    DECLARE I INTEGER 1;
    DECLARE J INTEGER;
    SET J = CARDINALITY(InputRoot.*[]);
    WHILE I < J DO
        SET OutputRoot.*[I] = InputRoot.*[I];
        SET I = I + 1;
    END WHILE;
END;

CREATE PROCEDURE CopyEntireMessage() BEGIN
    SET OutputRoot = InputRoot;
END;
END MODULE;