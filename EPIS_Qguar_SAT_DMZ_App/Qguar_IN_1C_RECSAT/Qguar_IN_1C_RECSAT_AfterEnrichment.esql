BROKER SCHEMA Qguar_IN_1C_RECSAT
CREATE COMPUTE MODULE Qguar_IN_1C_RECSAT_AfterEnrichment
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
		-- ✅ VALIDATION LOGIC: Light processing for validation and routing
		DECLARE episInfo 		REFERENCE TO 	Environment.variables.EventData.episInfo;
		DECLARE sourceInfo 		REFERENCE TO 	Environment.variables.EventData.sourceInfo;
		DECLARE targetInfo 		REFERENCE TO 	Environment.variables.EventData.targetInfo;
		DECLARE integrationInfo REFERENCE TO 	Environment.variables.EventData.integrationInfo;
		DECLARE dataInfo 		REFERENCE TO 	Environment.variables.EventData.dataInfo;
		
		-- ✅ VALIDATION RULES: Message validation and routing decisions
		DECLARE result CHARACTER;
		SET result = PASSTHRU('CALL sp_ValidateCW1ServiceResponse(?)',
		InputRoot.XMLNSC.:Header.:CW1ServiceResponse
		);
		SET OutputRoot.XMLNSC.*:ValidationResult = result;
		
		-- ✅ ROUTING LOGIC: Conditional routing based on message content
		IF (InputRoot.XMLNSC.:Header.:MessageType = 'XUS') THEN
			SET result = PASSTHRU('CALL sp_GetCompany(?, ?)',
			InputRoot.XMLNSC.:Header.:CompanyCode,
			InputRoot.XMLNSC.:Header.:CountryCode
			);
			SET OutputRoot.XMLNSC.*:CompanyData = result;
		ELSE
			SET result = PASSTHRU('CALL sp_GetCW1DatabaseInfo(?)',
			InputRoot.XMLNSC.:Header.:CW1DatabaseName
			);
			SET OutputRoot.XMLNSC.*:CW1DatabaseInfo = result;
		END IF;
		
		-- ✅ STANDARD MESSAGE PROCESSING
		SET OutputRoot = NULL;
		SET OutputRoot = InputRoot;
		
		-- ✅ DATABASE OPERATIONS
		DECLARE cw1DatabaseUpdateResult CHARACTER;
		SET cw1DatabaseUpdateResult = PASSTHRU('CALL sp_UpdateCW1Database(?, ?)',
		InputRoot.XMLNSC.:Header.:CW1DatabaseName,
		InputRoot.XMLNSC.:Header.:CW1DatabaseInfo
		);
		SET OutputRoot.XMLNSC.*:CW1DatabaseUpdateResult = cw1DatabaseUpdateResult;
		
		DECLARE brAppsDatabaseLookupResult CHARACTER;
		SET brAppsDatabaseLookupResult = PASSTHRU('CALL sp_LookupBRAppsDatabase(?, ?)',
		InputRoot.XMLNSC.:Header.:BRAppsDatabaseName,
		InputRoot.XMLNSC.:Header.:BRAppsDatabaseInfo
		);
		SET OutputRoot.XMLNSC.*:BRAppsDatabaseLookupResult = brAppsDatabaseLookupResult;
		
		DECLARE cw1DatabaseLookupResult CHARACTER;
		SET cw1DatabaseLookupResult = PASSTHRU('CALL sp_LookupCW1Database(?, ?)',
		InputRoot.XMLNSC.:Header.:CW1DatabaseName,
		InputRoot.XMLNSC.:Header.:CW1DatabaseInfo
		);
		SET OutputRoot.XMLNSC.*:CW1DatabaseLookupResult = cw1DatabaseLookupResult;
		
		DECLARE errorLoggingDatabaseOperationsResult CHARACTER;
		SET errorLoggingDatabaseOperationsResult = PASSTHRU('CALL sp_LogErrorDatabaseOperations(?, ?)',
		InputRoot.XMLNSC.:Header.:ErrorDatabaseOperations,
		InputRoot.XMLNSC.:Header.:ErrorDatabaseOperationsInfo
		);
		SET OutputRoot.XMLNSC.*:ErrorLoggingDatabaseOperationsResult = errorLoggingDatabaseOperationsResult;
		
		RETURN TRUE;
	END;

	-- ✅ STANDARD IBM ACE INFRASTRUCTURE
	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;

END MODULE;